devtools::load_all(".")
library(ppchem)
library(ppchem)
?sf::st_polygon
library(sf)
outer = matrix(c(0,0,10,0,10,10,0,10,0,0),ncol=2, byrow=TRUE)
hole1 = matrix(c(1,1,1,2,2,2,2,1,1,1),ncol=2, byrow=TRUE)
hole2 = matrix(c(5,5,5,6,6,6,6,5,5,5),ncol=2, byrow=TRUE)
pts = list(outer, hole1, hole2)
(pl1 = st_polygon(pts))
plot(pl1)
outer
?sf::st_make_grid
#' input traffic data is usually for morning rush hours.
#'
#' @param x numeric vector for passenger cars
#' @return numeric vector of total volume of traffic per link, or data-frames
#' of expanded traffic
#' @import h5
#' @export
#' @examples \dontrun{
#' # do not run
#' }
library(h5)
?readAttribute
#' @description \code{\link{read_edgar}} calculates ADT based on hourly traffic data. The
#' input traffic data is usually for morning rush hours.
#'
#' @param x numeric vector for passenger cars
#' @return numeric vector of total volume of traffic per link, or data-frames
#' of expanded traffic
#' @import h5
#' @export
#' @examples \dontrun{
#' # do not run
path  = "~/Downloads/EDGAR-HTAP_TRANSPORT_2010.h5"
#' }
library(h5)
file <- h5file(name = path,
mode = mode)
mode ="r"
file <- h5::h5file(name = path,
mode = mode)
file
verbose = TRUE
file <- h5::h5file(name = path,
mode = mode)
if(verbose) print(file)
if(verbose) print(file)
class(file)
mode(file)
file@mode
file@location
file@pointer
readLines(file)
readlines(file)
a <- (file)
a
a[1,]
capture.output(file)
aa <- capture.output(file)
aa <- aa[2:length(aa)]
aa
grep(pattern = "D",aa)
aa[grep(pattern = "D",aa)]
if(verbose) cat(Attributes, aa[grep(pattern = "A ",aa)])
aa[grep(pattern = "A ",aa)]
if(verbose) cat("Datasets", aa[grep(pattern = "D ",aa)])
if(verbose) cat("Attributes", aa[grep(pattern = "A ",aa)])
if(verbose) cat("Datasets\n", aa[grep(pattern = "D ",aa)], "\n")
if(verbose) cat("Attributes\n", aa[grep(pattern = "A ",aa)], "\n")
read_edgar <- function(path, mode ="r", verbose = TRUE) {
file <- h5::h5file(name = path,
mode = mode)
aa <- capture.output(file)
aa <- aa[2:length(aa)]
if(verbose) print(file)
if(verbose) cat("Datasets\n", aa[grep(pattern = "D ",aa)], "\n")
if(verbose) cat("Attributes\n", aa[grep(pattern = "A ",aa)], "\n")
}
list.datasets(file, recursive = TRUE)
if(verbose) cat("Attributes\n", aa[grep(pattern = "A ",aa)], "\n")
if(verbose) cat("Datasets\n", aa[grep(pattern = "D ",aa)], "\n")
if(verbose) cat("Datasets\n", list.datasets(file, recursive = TRUE), "\n")
if(verbose) cat("Attributes\n", list.attributes(file, recursive = TRUE), "\n")
if(verbose) cat("Attributes\n", list.attributes(file), "\n")
if(verbose) print(file)
if(verbose) cat("Datasets:\n",
list.datasets(file, recursive = TRUE), "\n")
if(verbose) cat("Attributes:\n",
list.attributes(file), "\n")
ds <- gsub(pattern = "/", replacement = "", ds)
ds <- list.datasets(file, recursive = TRUE)
ds <- gsub(pattern = "/", replacement = "", ds)
if(verbose) print(file)
if(verbose) cat("Datasets:\n",
ds, "\n")
if(verbose) cat("Attributes:\n",
list.attributes(file), "\n")
#' input traffic data is usually for morning rush hours.
#'
#' @param x numeric vector for passenger cars
#' @return numeric vector of total volume of traffic per link, or data-frames
#' of expanded traffic
#' @import h5
#' @export
#' @examples \dontrun{
#' # do not run
#' }
library(h5)
path  = "~/Downloads/EDGAR-HTAP_TRANSPORT_2010.h5"
mode ="r"
verbose = TRUE
read_edgar <- function(path,
mode ="r",
verbose = TRUE,
dataset,
attribute) {
file <- h5::h5file(name = path,
mode = mode)
aa <- capture.output(file)
aa <- aa[2:length(aa)]
ds <- list.datasets(file, recursive = TRUE)
if(verbose) print(file)
if(verbose) cat("Datasets:\n",
ds, "\n")
if(verbose) cat("Attributes:\n",
list.attributes(file), "\n")
if(missing(dataset)){
choice <- utils::menu(ds, title="Choose dataset")
nds <- ds[choice]
a <- file[nds]
} else {
a <- file[dataset]
}
}
readAttribute(file)
file
readAttribute(.Object = file)
openAttribute(file, "NAME")
if(verbose) cat("Attributes:\n",
list.attributes(file), "\n")
a <- openAttribute(file, "NAME")
a
readAttribute(a)
(a <- openAttribute(file, "SIZE X"))
readAttribute(a)
(a <- openAttribute(file, "SIZE Y"))
readAttribute(a)
if(verbose) cat("Attributes:\n",
list.attributes(file), "\n")
(a <- openAttribute(file, "SIZE Z"))
readAttribute(a)
openDataSet
nds
a <- file["PM2.5"]
class(a)
dim(a)
